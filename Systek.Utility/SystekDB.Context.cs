//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Systek.Utility
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;

    /// <summary>
    /// 
    /// </summary>
    /// <seealso cref="System.Data.Entity.DbContext" />
    public partial class LoggingContext : DbContext
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingContext"/> class.
        /// </summary>
        public LoggingContext()
            : base("name=LoggingContext")
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingContext"/> class.
        /// </summary>
        /// <param name="contextName">Name of the context.</param>
        public LoggingContext(string contextName)
            : base("name=" + contextName)
        {
        }

        /// <summary>
        /// This method is called when the model for a derived context has been initialized, but
        /// before the model has been locked down and used to initialize the context.  The default
        /// implementation of this method does nothing, but it can be overridden in a derived class
        /// such that the model can be further configured before it is locked down.
        /// </summary>
        /// <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        /// <exception cref="UnintentionalCodeFirstException"></exception>
        /// <remarks>
        /// Typically, this method is called only once when the first instance of a derived context
        /// is created.  The model for that context is then cached and is for all further instances of
        /// the context in the app domain.  This caching can be disabled by setting the ModelCaching
        /// property on the given ModelBuidler, but note that this can seriously degrade performance.
        /// More control over caching is provided through use of the DbModelBuilder and DbContextFactory
        /// classes directly.
        /// </remarks>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        /// <summary>
        /// Gets or sets the type of the table area.
        /// </summary>
        /// <value>
        /// The type of the table area.
        /// </value>
        public virtual DbSet<tblAreaType> tblAreaType { get; set; }
        /// <summary>
        /// Gets or sets the table role.
        /// </summary>
        /// <value>
        /// The table role.
        /// </value>
        public virtual DbSet<tblRole> tblRole { get; set; }
        /// <summary>
        /// Gets or sets the table server.
        /// </summary>
        /// <value>
        /// The table server.
        /// </value>
        public virtual DbSet<tblServer> tblServer { get; set; }
        /// <summary>
        /// Gets or sets the table system log.
        /// </summary>
        /// <value>
        /// The table system log.
        /// </value>
        public virtual DbSet<tblSystemLog> tblSystemLog { get; set; }
        /// <summary>
        /// Gets or sets the type of the table.
        /// </summary>
        /// <value>
        /// The type of the table.
        /// </value>
        public virtual DbSet<tblType> tblType { get; set; }
        /// <summary>
        /// Gets or sets the table command.
        /// </summary>
        /// <value>
        /// The table command.
        /// </value>
        public virtual DbSet<tblCommand> tblCommand { get; set; }
        /// <summary>
        /// Gets or sets the table command set.
        /// </summary>
        /// <value>
        /// The table command set.
        /// </value>
        public virtual DbSet<tblCommandSet> tblCommandSet { get; set; }
        /// <summary>
        /// Gets or sets the table message log.
        /// </summary>
        /// <value>
        /// The table message log.
        /// </value>
        public virtual DbSet<tblMessageLog> tblMessageLog { get; set; }
        /// <summary>
        /// Gets or sets the type of the table message.
        /// </summary>
        /// <value>
        /// The type of the table message.
        /// </value>
        public virtual DbSet<tblMessageType> tblMessageType { get; set; }
        /// <summary>
        /// Gets or sets the table user.
        /// </summary>
        /// <value>
        /// The table user.
        /// </value>
        public virtual DbSet<tblUser> tblUser { get; set; }
        /// <summary>
        /// Gets or sets the v log.
        /// </summary>
        /// <value>
        /// The v log.
        /// </value>
        public virtual DbSet<vLog> vLog { get; set; }
    }
}
